// Test generated by RoostGPT for test azure-golang-multifile using AI Type Azure Open AI and AI Model roost-gpt4-32k

package main

import (
	"fmt"
	"math/rand"
	"strings"
	"testing"
	"time"
	"io"
	"bytes"
)

var testSubTotalBill float64 = 2000  // Set some initial value for test purpose

func testPrintFinalBill(w io.Writer, subTotalBill float64) {
	for _, element := range "Here is your final bill:-" {
		fmt.Fprintf(w, "%c", element)
		time.Sleep(time.Millisecond * 50)
	}
	fmt.Fprintln(w)

	fmt.Fprintf(w, "\n%52s\n", "JAIPUR BHOJANALYA")
	time.Sleep(time.Millisecond * 200)
	fmt.Fprintf(w, "%s\n", strings.Repeat("*", 91))
	time.Sleep(time.Millisecond * 200)
	fmt.Fprintf(w, "%86s\n", "Bhawani Singh Road, First Floor, Jaipur Bhojanalya, Jaipur, Jaipur 302005, Bharat")
	time.Sleep(time.Millisecond * 200)
	fmt.Fprintf(w, "%50s\n", "Tel: 92145623XX")
	fmt.Fprintf(w, "%60s\n\n", "Email: jaipur.bhojanalaya@gmail.com")
	time.Sleep(time.Millisecond * 200)
	fmt.Fprint(w, strings.Repeat("-", 42))
	fmt.Fprint(w,"INVOICE")
	fmt.Fprint(w, strings.Repeat("-", 42))
	fmt.Fprintln(w)
	time.Sleep(time.Millisecond * 200)

	rand.Seed(time.Now().Unix()) //necessary to produce random integers
	fmt.Fprint(w, " Ticket No: %d\n", rand.Intn(550)+1)

	fmt.Fprintf(w, " Date: %v\n", time.Now().Local().Format("06-Jan-02")) //display date
	fmt.Fprintf(w, " Time: %v", time.Now().Local().Format("3:4 PM"))      //display time
	time.Sleep(time.Millisecond * 200)

	// generateBill() //prints details of the bill,like, item name, price, quantity and total price and sub total amount.

	tax := 18 * subTotalBill / (100)
	grandTotal := subTotalBill + tax

	time.Sleep(time.Millisecond * 200)
	fmt.Fprintf(w, "%71s: ₹%.2f\n", "GST", tax) //display tax amount
	fmt.Fprintf(w, "+%s+\n", strings.Repeat("-", 90))
	time.Sleep(time.Millisecond * 200)
	fmt.Fprintf(w, "%71s: ₹%.2f\n", "Grand Total", grandTotal) //display final bill
	fmt.Fprintf(w, "+%s+\n", strings.Repeat("-", 90))
}

func TestPrintFinalBill_42388c9d9f(t *testing.T) {
	subTotalBill := 100.0 // TODO: Change this value when necessary
	var buf bytes.Buffer
	testPrintFinalBill(&buf, subTotalBill)
	result := buf.String()
	expectedGST := fmt.Sprintf("%71s: ₹%.2f\n", "GST", 18 * subTotalBill / 100)
	if !strings.Contains(result, expectedGST) {
		t.Errorf("Expected GST line: %s but not found in the bill", expectedGST)
	}
	expectedTotal := fmt.Sprintf("%71s: ₹%.2f\n", "Grand Total", subTotalBill + (18 * subTotalBill / 100))
	if !strings.Contains(result, expectedTotal) {
		t.Errorf("Expected Grand Total line: %s but not found in the bill", expectedTotal)
	}
}
