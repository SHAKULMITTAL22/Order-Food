package main

import (
	"fmt"
	"strings"
	"testing"
)

// Test generated by RoostGPT for test vertex-codebison-multifile-golang using AI Type Vertex AI and AI Model code-bison-32k

// TestOrderItems_acf2a0f607 tests the orderItems function.
// It covers the following scenarios:
// 1. User enters a valid item number and quantity.
// 2. User enters an invalid item number.
// 3. User enters a valid item number but invalid quantity.
// 4. User enters 0 to exit the loop.
func TestOrderItems_acf2a0f607(t *testing.T) {
	// Create a test case for each scenario.
	testCases := []struct {
		name           string
		inputItemNo    uint
		inputNoOfPlates uint
		expectedOutput string
	}{
		{
			name:           "Valid item number and quantity",
			inputItemNo:    1,
			inputNoOfPlates: 2,
			expectedOutput: "You just ordered 2 Idli which amounts to â‚¹30.0.",
		},
		{
			name:           "Invalid item number",
			inputItemNo:    5,
			inputNoOfPlates: 2,
			expectedOutput: "Invalid item number. Please enter a valid item number.",
		},
		{
			name:           "Valid item number but invalid quantity",
			inputItemNo:    1,
			inputNoOfPlates: 0,
			expectedOutput: "Invalid quantity. Please enter a valid quantity.",
		},
		{
			name:           "User enters 0 to exit the loop",
			inputItemNo:    0,
			inputNoOfPlates: 0,
			expectedOutput: "",
		},
	}

	// Run each test case.
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Reset the customerOrder and subTotalBill variables before each test case.
			customerOrder = make(map[string]uint)
			subTotalBill = 0.0

			// Create a mock stdin object to simulate user input.
			stdin := strings.NewReader(fmt.Sprintf("%d\n%d\n", tc.inputItemNo, tc.inputNoOfPlates))
			oldStdin := fmt.Stdin
			fmt.Stdin = stdin

			// Call the orderItems function.
			orderItems()

			// Restore the original stdin object.
			fmt.Stdin = oldStdin

			// Check if the output matches the expected output.
			if tc.expectedOutput != "" && !strings.Contains(output, tc.expectedOutput) {
				t.Errorf("Expected output:\n%s\nActual output:\n%s", tc.expectedOutput, output)
			}

			// Check if the customerOrder and subTotalBill variables have the correct values.
			if len(customerOrder) != 1 || customerOrder["Idli"] != tc.inputNoOfPlates {
				t.Errorf("Expected customerOrder: %v\nActual customerOrder: %v", tc.inputNoOfPlates, customerOrder)
			}
			if subTotalBill != 30.0 {
				t.Errorf("Expected subTotalBill: %v\nActual subTotalBill: %v", 30.0, subTotalBill)
			}
		})
	}
}
